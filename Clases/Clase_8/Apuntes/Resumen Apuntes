### **Resumen de todo lo visto** ğŸš€  

A lo largo de nuestra conversaciÃ³n, hemos explorado en detalle **procesos y concurrencia en Python** con `multiprocessing`.   

---

### **ğŸ”¹ Fundamentos de Procesos en Python**  
âœ… Diferencia entre **procesos** e **hilos** â†’ Un proceso tiene su propio espacio de memoria, mientras que los hilos comparten recursos dentro de un mismo proceso.  
âœ… Ventajas de `multiprocessing` frente a `threading` â†’ Evita el **GIL (Global Interpreter Lock)**, permitiendo verdadero paralelismo.  
âœ… CreaciÃ³n de procesos con `Process()` â†’ Uso de `start()`, `join()`, `terminate()` y `is_alive()`.  

ğŸ“Œ **Ejercicio 1** â†’ CreaciÃ³n y ejecuciÃ³n de procesos con `multiprocessing.Process`.  

---

### **ğŸ”¹ ComunicaciÃ³n entre Procesos**  
âœ… **`Pipe()`** â†’ ComunicaciÃ³n **rÃ¡pida** entre dos procesos.  
âœ… **`Queue()`** â†’ Escalabilidad para mÃºltiples procesos.  
âœ… **`Manager().list()`** â†’ Memoria compartida con acceso seguro.  

ğŸ“Œ **Ejercicio 2** â†’ ImplementaciÃ³n de `Queue()` para compartir resultados de cÃ¡lculo.  
ğŸ“Œ **Ejercicio 5** â†’ Pipeline productor-consumidor con `Pipe()` doble.  

---

### **ğŸ”¹ SincronizaciÃ³n y GestiÃ³n de Concurrencia**  
âœ… **Condiciones de carrera** â†’ Problema cuando varios procesos acceden a la misma variable sin control.  
âœ… **Uso de `Lock()`** â†’ Evita que mÃºltiples procesos modifiquen datos simultÃ¡neamente.  
âœ… **Back-off exponencial** â†’ Estrategia para evitar bloqueos prolongados.  

ğŸ“Œ **Ejercicio 3** â†’ DemostraciÃ³n de condiciÃ³n de carrera y soluciÃ³n con `Lock()`.  
ğŸ“Œ **Ejercicio 9** â†’ SimulaciÃ³n de un sistema bancario con cajeros concurrentes.  

---

### **ğŸ”¹ Multiprocessing Avanzado**  
âœ… **`Pool()`** â†’ Manejo automÃ¡tico de mÃºltiples procesos sin sobrecarga manual.  
âœ… **Memoria compartida con `Value()` y `Array()`** â†’ Permite datos accesibles por todos los procesos.  
âœ… **Paralelismo distribuido** â†’ TÃ©cnicas para distribuir carga de trabajo eficientemente.  

ğŸ“Œ **Ejercicio 4** â†’ ComparaciÃ³n de `multiprocessing` vs. `threading` en tareas CPU-bound.  
ğŸ“Œ **Ejercicio 8** â†’ CÃ¡lculo de nÃºmeros primos en paralelo con sincronizaciÃ³n de archivos.  

---

### **ğŸ”¹ Benchmark y ComparaciÃ³n de IPC**  
âœ… MediciÃ³n de rendimiento de **`Pipe()` vs. `Queue()` vs. `Manager().list()`**.  
âœ… Uso de `matplotlib` para representar comparaciones grÃ¡ficas.  

ğŸ“Œ **Ejercicio 10** â†’ Benchmark de diferentes mecanismos de comunicaciÃ³n en Python.  
